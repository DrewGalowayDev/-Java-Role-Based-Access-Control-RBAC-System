

## 🔐 Role-Based Access Control (RBAC) System

![Java](https://img.shields.io/badge/Java-17%2B-blue)
![H2 Database](https://img.shields.io/badge/H2-Embedded-green)
![JDBC](https://img.shields.io/badge/JDBC-4.2-yellow)
![License](https://img.shields.io/badge/License-MIT-brightgreen)

A secure, console-based Java Role-Based Access Control (RBAC) system that manages user authentication and role-based access using an embedded H2 database and SHA-256 password hashing.

---

## 🌟 Features

* **Console-Based UI**: Simple terminal interface for user interaction.
* **Authentication**: Secure password storage using SHA-256 hashing.
* **Role Management**: Predefined roles – `ADMIN`, `EDITOR`, `VIEWER`.
* **Dynamic Access Control**: Permissions are enforced based on assigned roles.
* **Embedded H2 DB**: Lightweight in-memory or file-based database.
* **No External Dependencies**: Pure Java with JDBC.

---

## 📂 Project Structure

```bash
.
├── Main.java          # Console interface and entry point
├── Role.java          # Enum defining roles
├── User.java          # User data model
├── DBHelper.java      # Handles database setup and user queries
├── AuthService.java   # Registration, login, and hashing logic
```

---

## ⚙️ Technologies Used

* **Java 17+**
* **H2 Database (embedded)**
* **JDBC**
* **SHA-256 for password hashing**

---

## 🚀 Getting Started

### 🔧 Prerequisites

* Java 17 or higher
* Any IDE or terminal with Java support

### 🛠 Installation & Run

1. **Clone the repository**:

   ```bash
   git clone https://github.com/your-username/java-rbac-system.git
   cd java-rbac-system
   ```

2. **Compile and run**:

   ```bash
   javac *.java
   java Main
   ```

---

## 🧪 Usage

Upon running the app, users can register or log in.

### ✍️ Register

Provide:

* Username
* Password
* Role (ADMIN, EDITOR, VIEWER)

### 🔐 Login

Provide:

* Username
* Password

### 👥 Role-Based Outputs

| Role   | Permissions                          |
| ------ | ------------------------------------ |
| ADMIN  | Full access, administrative messages |
| EDITOR | Edit/update content                  |
| VIEWER | Read-only access                     |

Console outputs vary depending on the role after login.

---

## 🧠 Code Highlights

### 🔑 Password Hashing

Uses SHA-256 hashing algorithm for storing passwords:

```java
MessageDigest md = MessageDigest.getInstance("SHA-256");
byte[] hash = md.digest(password.getBytes());
```

### 📄 Database Initialization

H2 database is initialized on application start with the `users` table:

```sql
CREATE TABLE IF NOT EXISTS users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(255),
  password VARCHAR(255),
  role VARCHAR(50)
);
```

---

## 📚 Learning Outcomes

* Applied role-based access control principles
* Implemented secure password handling using SHA-256
* Designed modular Java system with OOP best practices
* Managed database operations using embedded JDBC + H2
* Built a CLI tool enforcing authentication + authorization

---

## 📜 License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for more details.

---

## ✉️ Contact

For questions or feedback, feel free to reach out:
📧 [robinsonotoch7@gmail.com.com](mailto:robinsonotoch7@gmail.com)

---
